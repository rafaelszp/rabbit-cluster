package szp.rafael.rabbitcluster.simplerabbitmqclient.exchange.topic;

import com.rabbitmq.client.AMQP;
import com.rabbitmq.client.Consumer;
import com.rabbitmq.client.DefaultConsumer;
import com.rabbitmq.client.Envelope;
import szp.rafael.rabbitcluster.simplerabbitmqclient.api.AbstractSimpleRMQ;

import java.io.IOException;
import java.util.Arrays;

/**
 * Created by rafael on 2/13/17.
 */
public class AnimalTopicXConsumer extends AbstractSimpleRMQ {

  private static final String EXCHANGE_NAME = "topic_logs";

  public static void main(String... args) throws Exception{

	if (args.length < 1){
	  System.err.println("Usage: ReceiveLogsDirect [0|1]");
	  System.exit(1);
	}
	String key=null;
	if(args[0].trim().equalsIgnoreCase("0")){
	  key = "*.orange.*,";

	}else if(args[0].trim().equalsIgnoreCase("1")){
	  key = "*.*.rabbit,lazy.#";
	}else{
	  System.err.println("Usage: ReceiveLogsDirect [0|1]");
	  System.exit(1);
	}
	String[] keys = key.split(",");
	initConnection();

	channel.exchangeDeclare(
			EXCHANGE_NAME,
			"topic"
	);
	String queueName = channel.queueDeclare().getQueue(); //GETTING THE TEMP QUEUE GENERATED BY FANOUT EXCHANGE
	Arrays.asList(keys).forEach(b -> {
	  try {
		channel.queueBind(queueName,
				EXCHANGE_NAME,
				b
		);
	  } catch (IOException e) {
		e.printStackTrace();
	  }
	});

	System.out.println(String.format("Receiving messages{%s} ... ",keys));
	Consumer consumer = new DefaultConsumer(channel){
	  @Override
	  public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException {
		String message = new String(body,"UTF-8");
		System.out.printf("\nReceived message {%s} | Routing key: {%s}",message,envelope.getRoutingKey());
	  }
	};

	channel.basicConsume(queueName,true,consumer);

  }

}
