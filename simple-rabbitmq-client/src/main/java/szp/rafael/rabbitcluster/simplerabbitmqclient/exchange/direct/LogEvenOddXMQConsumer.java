package szp.rafael.rabbitcluster.simplerabbitmqclient.exchange.direct;

import com.rabbitmq.client.AMQP;
import com.rabbitmq.client.Consumer;
import com.rabbitmq.client.DefaultConsumer;
import com.rabbitmq.client.Envelope;
import szp.rafael.rabbitcluster.simplerabbitmqclient.api.AbstractSimpleRMQ;

import java.io.IOException;

/**
 * Created by rafael on 2/13/17.
 */
public class LogEvenOddXMQConsumer extends AbstractSimpleRMQ {

  private static final String EXCHANGE_NAME = "direct_logs";

  public static void main(String... args) throws Exception {

    if (args.length < 1) {
      System.err.println("Usage: ReceiveLogsDirect [even|odd]");
      System.exit(1);
    }
    initConnection();

    channel.exchangeDeclare(
            EXCHANGE_NAME,
            "direct"
    );
    String queueName = channel.queueDeclare().getQueue(); //GETTING THE TEMP QUEUE GENERATED BY FANOUT EXCHANGE
    channel.queueBind(queueName,
            EXCHANGE_NAME,
            args[0] //even or odd
    );

    System.out.println("Receiving messages ... ");
    Consumer consumer = new DefaultConsumer(channel) {
      @Override
      public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException {
        String message = new String(body, "UTF-8");
        System.out.printf("\nReceived message {%s} | Routing key: {%s}", message, envelope.getRoutingKey());
      }
    };

    channel.basicConsume(queueName, true, consumer);

  }

}
