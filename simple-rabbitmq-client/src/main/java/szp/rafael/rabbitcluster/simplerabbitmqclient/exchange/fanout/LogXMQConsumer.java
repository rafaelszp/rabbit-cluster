package szp.rafael.rabbitcluster.simplerabbitmqclient.exchange.fanout;

import com.rabbitmq.client.AMQP;
import com.rabbitmq.client.Consumer;
import com.rabbitmq.client.DefaultConsumer;
import com.rabbitmq.client.Envelope;
import szp.rafael.rabbitcluster.simplerabbitmqclient.api.AbstractSimpleRMQ;

import java.io.IOException;

/**
 * Created by rafael on 2/13/17.
 */
public class LogXMQConsumer extends AbstractSimpleRMQ{

  private static final String EXCHANGE_NAME = "logs";

  public static void main(String... args) throws Exception{

    initConnection();

	channel.exchangeDeclare(
			EXCHANGE_NAME,
			"fanout" //EXCHANGE TYPE - A fanout exchange routes messages to all of the queues that are bound
			// to it and the routing key is ignored. Ideal for broadcast
	);
	String queueName = channel.queueDeclare().getQueue(); //GETTING THE TEMP QUEUE GENERATED BY FANOUT EXCHANGE
	channel.queueBind(queueName,EXCHANGE_NAME,"");

	System.out.println("Receiving messages ... ");
	Consumer consumer = new DefaultConsumer(channel){
	  @Override
	  public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException {
		String message = new String(body,"UTF-8");
		System.out.printf("\nReceived message {%s}",message);
	  }
	};

	channel.basicConsume(queueName,true,consumer);

  }
}
